% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cre_occurred.R
\name{cred_occurred}
\alias{cred_occurred}
\alias{cred_occurred_}
\title{occurred}
\usage{
cred_occurred(date, source = NULL, work = NULL, ...)

cred_occurred_(dates, source = NULL, work = NULL, async = FALSE, ...)
}
\arguments{
\item{date}{(character) a POSIX date. required.}

\item{source}{(character) alt-metric Source name. optional}

\item{work}{(character) a work DOI. optional}

\item{...}{Curl options passed on to \code{\link[httr]{GET}}. 
Note that for now, when doing async you can't pass on curl options - 
will try to add later.}

\item{dates}{(character) Two or more dates. required. dates must be of the 
form YYYY-MM-DD. You can easily create a sequence of dates like 
\code{seq(from = as.Date("2016-08-01"), to = as.Date("2016-10-18"), 
by = "day")}}

\item{async}{(logical) do requests asynchronously. default: \code{FALSE}}
}
\description{
occurred
}
\section{Collected vs. Occurred}{

\itemize{
 \item \strong{collected} is useful when you want to run a daily query to 
 fetch all Events for a given filter and you want to be sure you always 
 have all available Events
 \item \strong{collected} is useful when you want to reference a dataset 
 and be sure it never changes
 \item \strong{occurred} is useful when you want to retrieve Events that
 occurred at a particular time
 \item when using \strong{occurred} you should be aware that new Events 
 may be collected at any time in the future that occurred at a date 
 in the past
}
}

\section{Pagination}{

Pagination is not done in a typical fashion with query parameters 
like \code{page = 1} and \code{per_page=10}, but rather is done 
by requesting data by date. Unfortunately, each request can only 
include data for one date.
}

\section{Sources}{

The following data sources can be passed to the \code{source} 
parameter:
\itemize{
 \item crossref_datacite
 \item facebook
 \item mendeley
 \item newsfeed
 \item reddit
 \item twitter
 \item wikipedia
 \item wordpressdotcom
 \item datacite_crossref
}
}

\section{Async notes}{

Async usees \pkg{curl} directly for doing async requests, while
non-async requests use \pkg{httr}, which depends on \pkg{curl}. 

Async requests return essentially the same results compared to 
non-async, although the order is different since the requests from
async are not given back in order given. Just be aware of this.

If you run into any problems with async let us know at 
\url{http://www.github.com/ropenscilabs/crevents/issues}

Note that for now, when doing async you can't pass on curl options - 
will try to add later.
}
\examples{
\dontrun{
# all works for a single date, across all sources
res <- cred_occurred(date = '2016-08-27')

# all works, for a single source on a single date
res <- cred_occurred(date = '2016-08-27', source = 'twitter')
res$`message-type`
res$`total-events`
res$events

# single work, on a single date, for a single source
res <- cred_occurred(date = '2016-08-27', work = '10.1107/S2056989016013359',
  source = 'twitter')
res$`message-type`
res$`total-events`
res$events

# single work, with a range of dates, for a single source
dates <- seq(from = as.Date("2016-08-01"), to = as.Date("2016-10-18"), 
  by = "day")
res <- cred_occurred_(dates, work = '10.1056/NEJMP1608511')
res[[1]]
res[[2]]
lapply(res, "[[", "events")
do.call("rbind.data.frame", lapply(res, "[[", "events"))

# use curl async
dates <- seq(from = as.Date("2016-08-01"), to = as.Date("2016-10-18"), 
  by = "day")
res_async <- cred_occurred_(dates, work = '10.1056/NEJMP1608511', 
  async = TRUE)
res_async[[1]]
res_async[[2]]
lapply(res_async, "[[", "events")
do.call("rbind.data.frame", lapply(res_async, "[[", "events"))
}
}

